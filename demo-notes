Why me?

I've had to force myself to pair with lots of different for the last
five years. Pairing is the best way to learn the ecosystem, but also new
development practices. If I didn't learn, I couldn't do my job.


Why pair program?
* increase productivity
* deliver better code
* catch bugs sooner
* konwledge sharing

First pairing experience:
* good friends
* both have been developing solo some time
* each wanted to go its own way
* got nothing done on day 1
* exhausted

Rules of the Road
* two drivers
* two keyboards (or laptop and keyboard)
* two monitors
* "What do you want me to type"
* something concrete to work on

  Two Drivers
    * multiple keyboards
    * multiple monitors
    * you don't need to extend display on two monitors when pairing
      * mirror displays instead
      * nice setup for mac when you open the laptop it remembers your settings

    What does this ^ mean?
      * you are not king
      * workstation is not your castle
      * give up your super-customized dev environment

Rules of the Road
* keep your eyes on the road
  * no twitter
  * no email
  * absolutely no Facebook
* important phone calls OK, but let your pair know

Other Tips
* do not pair on trivial things
* for research ok to get two laptops, but then put one away
* do not neglect hygiene - disrespectful
* periodic breaks
* think outloud - all the time
* agree on small tasks (1-2 hours) and focus on that (as opposed to the entire story)
* retrospect frequently to make sure you're not straying from your main goal

* remote pair programming
  * possible, but much harder
  * works well when the pair has been working together for some time
  * need solid tools
    * Internet (show some providers here)
    * Screen Hero

* Learn to type
  * as a professional developer, this will be your crutch
  * you don't have to type fast, but you have to learn to type
  * this is like the scales of a musicion
  * work on your shortcomings


What to do when:
1. You don't get any space
   * practice the art of encroachment
   * inch in a little by litte, but do it loudly
     * if they hear you, they will move
   * put your arms on the desk

2. It's been two hours and you got nothing done
  * Stop talking so much. Pick one way and just do it
  * STOP REFACTORING! Get stuff working, then refactor
  Watch out for:
  * all talk, no code
    * maybe you shouldn't be working on story
    * maybe you should just pick one


### Ideas for pictures
call this the "Short Version"
Show two pictures - fighting lions and cuddling lions

Fighting lions could be on the foreground of their prey
* the giraffe is the problem you're trying to solve
* these lions have got the wrong idea
* they're fighting each other and not the giraffe

Then show lions attacking their prey
* these lions are pair programming

You don't want to fight your partner, you want to fight the problem

Show a picture of Chris on his laptop and 6 unused monitors blank
